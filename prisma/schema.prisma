// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?   // Null for OAuth users
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Friend list (array of user IDs)
  friendIds     String[]  @db.ObjectId
  
  // Following/Followers (array of user IDs)
  followingIds  String[]  @db.ObjectId
  followerIds   String[]  @db.ObjectId
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  palettes      Palette[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum PaletteAccess {
  PUBLIC
  PRIVATE
  FRIENDS
}

model Palette {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  colorIds    String[]      @db.ObjectId // Array of Color IDs
  schemeType  String        // analogous, complementary, triadic, etc.
  access      PaletteAccess @default(PRIVATE) // public, private, or friends
  userId      String        @db.ObjectId
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  colors Color[] @relation(fields: [colorIds], references: [id])
  
  @@map("palettes")
}

model Color {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String?  // Color name (e.g., "Sky Blue") - optional
  hex        String   // Hex color code (e.g., "#87CEEB")
  rgb        String   // RGB values (e.g., "135, 206, 235")
  hsl        String   // HSL values (e.g., "197, 71%, 73%")
  cmyk       String   // CMYK values (e.g., "43%, 12%, 0%, 8%")
  company    String?  // Paint company name (e.g., "Sherwin-Williams") - optional
  code       String?  // Company-specific color code (e.g., "SW 6494") - optional
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  paletteIds String[]  @db.ObjectId
  palettes   Palette[] @relation(fields: [paletteIds], references: [id])
  
  @@map("colors")
}
